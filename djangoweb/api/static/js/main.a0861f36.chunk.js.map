{"version":3,"sources":["serviceWorker.js","common/behaviour.js","contexts/ThemeContextProvider.js","components/Navbar.js","components/Header.js","components/Container.js","common/constants.js","Models/ActiveRecord.js","Models/Model.js","Models/Plot.js","Models/Basic.js","Models/Ml.js","Models/Cl.js","store/models.js","settings/mocks.js","components/Plot.js","components/Loading.js","components/Plots.js","components/Mls.js","components/Cls.js","api/basic.js","contexts/BasicContextProvider.js","components/Upload.js","components/Basic.js","App.js","sagas/rootSaga.js","index.js"],"names":["Boolean","window","location","hostname","match","ENVIRONMENT","ThemeContext","React","createContext","Navbar","Component","className","Header","src","width","alt","href","Container","this","props","children","console","log","process","ActiveRecord","name","list","mode","_uploadProgress","_forceUpdate","_form","_subscribers","_selectList","genre","admin","forceUpdateOnSubscribers","method","includes","forceUpdate","getSelectList","attr","onSelect","item","form","value","selected","label","found","find","debug","setUploadProgress","bind","Array","isArray","push","resetForm","Object","keys","forEach","key","createAction","updateAction","formData","FormData","map","append","hasId","action","f","length","server","apiServer","msg","create","create_success","create_fail","read","read_success","read_fail","edit","edit_success","edit_fail","update","update_success","update_fail","delete","delete_success","delete_fail","data","type","types","payload","initState","actions","ok","state","newState","JSON","stringify","_id","timestamp","Date","now","$this","call","api","d","put","deleted","axios","get","then","res","catch","error","Error","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","post","getAll","Plot","newApiRead","channel1","suffix","plots","newApi","Basic","channels","channel2","transformation","transformations","bins","Ml","Cl","models","basics","mls","cls","data_plotting","histogram1d","heading","p","histogram2d","compensation","custom_transformation","scatter","threshold_gate","data_ml","histogram","gausian","gausian_table","gausian_posterior","gausian_posterior_table","gausian_filtered_low_posterior","gausian_mixture_model_two_channels","k_means","k_means2","image","data_section","id","title","toUpperCase","slice","split","join","Loading","Plots","loading","plot","nextProps","nextContext","readAction","setState","mapActionsToProps","deleteAction","createSuccessAction","withRouter","connect","Mls","ml","Cls","cl","test_score","k","predictions","counts","model","m","Upload","fileRef","createRef","encType","ref","multiple","aria-describedby","htmlFor","onClick","e","preventDefault","files","current","headers","basic","reload","err","uploadFile","Options","ch","onChange","attributes","target","status","defaultValue","App","rootSaga","i","takeLatest","sagas","reds","reducers","allReducers","combineReducers","assign","sagaMiddleware","createSagaMiddleware","allStoreEnhancers","navigator","userAgent","devToolsExtension","compose","applyMiddleware","store","createStore","run","getState","dispatch","subscribe","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a0861f36.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ENV = 'uat'; // api data\nexport const CLEAR_ORDER_AFTER_CREATION = true; // if true the order will be deleted from redux but will exist at Backend\nexport const ENVIRONMENT = {\n    DEV : true,\n    PROD: false,\n};\nexport const ODDS_UPDATE_INTERVAL = 9000; // milliseconds\nexport const STATS_UPDATE_INTERVAL = 5000; // milliseconds\n","import React from 'react'\n\nexport const ThemeContext = React.createContext();\n\n\nclass ThemeContextProvider extends React.Component {\n    state = {\n        isLightTheme: true,\n        light: {syntax: '#555', ui: '#ddd', bg: '#eee'},\n        dark: {syntax: '#ddd', ui: '#333', bg: '#555'},\n    }\n\n    toggleTheme = () => {\n        console.log('Inside isLightTheme')\n        this.setState({isLightTheme: ! this.state.isLightTheme});\n    }\n\n    render() {\n        return (\n            <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>\n                {this.props.children}\n            </ThemeContext.Provider>\n        )\n    }\n}\n\nexport default ThemeContextProvider;\n","import React from 'react'\nimport {ThemeContext} from '../contexts/ThemeContextProvider'\n\nconst Navbar = () => {\n\n    return (\n        <nav>\n            <ul className=\"inline\">\n                <li className=\"list-inline-item\">\n                    <h1>CELL ANALYSIS</h1>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react'\nimport {apiServer} from \"../settings/constants\";\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div className=\"py-5 text-center\">\n                <img src={apiServer + \"/static/img/logo192.png\"} width=\"200\" alt=\"img\"/>\n                <br/>\n                <a href={apiServer + \"/api/logout\"} className=\"btn btn-warning\">Logout</a>\n            </div>\n        )\n    }\n}\n\nexport default Header;\n","import React from 'react'\nimport Header from './Header'\n\nclass Container extends React.Component {\n    render() {\n        return(\n            <div className=\"container\">\n                <Header />\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Container;\n","const apiServer = process.env.REACT_APP_serverIp ? process.env.REACT_APP_serverIp : 'http://mobile-server.softhem.se:8090';\nconsole.log('ENV:', apiServer);\n\nexport  {\n    apiServer,\n};\n\n\n","import Model from './Model';\n\nclass ActiveRecord extends Model {\n    list = [];\n    mode = 'create';\n    _uploadProgress = 0;\n    _forceUpdate = () => null;\n    _form = {};\n    _subscribers = [];\n    _selectList = {\n        genre: [],\n        admin: []\n    };\n\n    constructor(name) {\n        super(name);\n        this.debug = true;\n        this.setUploadProgress = this.setUploadProgress.bind(this);\n    }\n\n    get __class() {\n        return 'ActiveRecord';\n    }\n\n    subscribe(method) {\n        if (Array.isArray(method)) {\n            this._subscribers = [...this._subscribers, ...method];\n        } else {\n            this._subscribers.push(method);\n        }\n        return this;\n    }\n\n    forceUpdateOnSubscribers = (method) => {\n        this._subscribers.includes(method) && this.forceUpdate();\n    }\n\n    set forceUpdate(f) {\n        this._forceUpdate = f;\n    }\n\n    set form(form) {\n        this._form = {};\n        for (let key in form) {\n            this._form[key] = form[key];\n        }\n        return this;\n    }\n\n    get form() {\n        return this._form;\n    }\n\n    setUploadProgress(value) {\n        this._uploadProgress = value;\n        if (value > 95) this.resetForm();\n        this._forceUpdate();\n    }\n\n    get uploadProgress() {\n        return this._uploadProgress;\n    }\n\n\n    /**\n     * Avoid problem of bound to unbound controls on form\n     */\n    resetForm() {\n        Object.keys(this.form).forEach(key => {\n            this._form[key] = '';\n        });\n        this._uploadProgress = 0;\n        this._forceUpdate();\n    }\n\n    submitForm(createAction, updateAction) {\n        const formData = new FormData();\n        Object.keys(this.form).map(key => {\n            formData.append(key, this.form[key]);\n        });\n\n        this.hasId ? updateAction({formData, action: this.setUploadProgress}) : createAction({\n            formData,\n            action: this.setUploadProgress\n        });\n    }\n\n    get hasId() {\n        if (this.form['id'] && this.form['id'].length > 0) return true;\n        if (this.form['_id'] && this.form['_id'].length > 0) return true;\n        return false;\n    }\n\n    // INTERFACE Select\n    getSelectList = (attr) => {\n        return this._selectList[attr] ? this._selectList[attr] : [];\n    };\n\n    // sets attr in form\n    onSelect = (item, attr) => {\n        console.log('Select ', item, attr);\n        this.form[attr] = item.value;\n    };\n\n    //@return {}\n    selected = (attr) => {\n        console.log('Select selected', attr);\n        if (!attr) {\n            return {value: 'na', label: 'NA'};\n        }\n        const found = this._selectList[attr].find(item => item.value == this.form[attr]);\n\n        if (!found) {\n            return this._selectList[attr][0];\n        }\n\n        return found;\n    }\n}\n\nexport default ActiveRecord;\n","import {call, put} from 'redux-saga/effects';\nimport axios from \"axios\";\nimport {apiServer} from \"../common/constants\";\n\nclass Model {\n\n    // Constructor - Name, forceUpdate\n    constructor(name) {\n        this.name = name;\n        this.forceUpdate = () => null;\n        this.server = apiServer + '/api/v1/' + name;\n        this.debug = false;\n    }\n\n    forceUpdate = () => null;\n\n    log(msg) {\n        if (false && this.debug) console.log(msg);\n    }\n\n    // Subscribers\n\n\n    // CRUD constants\n    get types() {\n        return {\n            create: this.name + '.create',\n            create_success: this.name + '.create.success',\n            create_fail: this.name + '.create.fail',\n\n            read: this.name + '.read',\n            read_success: this.name + '.read.success',\n            read_fail: this.name + '.read.fail',\n\n            edit: this.name + '.edit',\n            edit_success: this.name + '.edit.success',\n            edit_fail: this.name + '.edit.fail',\n\n            update: this.name + '.update',\n            update_success: this.name + '.update.success',\n            update_fail: this.name + '.update.fail',\n\n            delete: this.name + '.delete',\n            delete_success: this.name + '.delete.success',\n            delete_fail: this.name + '.delete.fail',\n        }\n    }\n\n    // ACTIONS\n    get actions() {\n        console.log('Inside actions')\n        return {\n            create: (data) => ({type: this.types.create, payload: {data}}),\n            create_success: (data) => ({type: this.types.create_success, payload: {data}}),\n            create_fail: (data) => ({type: this.types.create_fail, payload: {data}}),\n\n            read: (data) => ({type: this.types.read, payload: {data}}),\n            read_success: (data) => ({type: this.types.read_success, payload: {data}}),\n            read_fail: (data) => ({type: this.types.read_fail, payload: {data}}),\n\n            update: (data) => ({type: this.types.update, payload: {data}}),\n            update_success: (data) => ({type: this.types.update_success, payload: {data}}),\n            update_fail: (data) => ({type: this.types.update_fail, payload: {data}}),\n\n            edit: (data) => ({type: this.types.edit, payload: {data}}),\n            edit_success: (data) => ({type: this.types.edit_success, payload: {data}}),\n            edit_fail: (data) => ({type: this.types.edit_fail, payload: {data}}),\n\n            delete: (data) => ({type: this.types.delete, payload: {data}}),\n            delete_success: (data) => ({type: this.types.delete_success, payload: {data}}),\n            delete_fail: (data) => ({type: this.types.delete_fail, payload: {data}}),\n        };\n    }\n\n    // REDUCERS\n    get reducers() {\n        const initState = {\n            list: [],\n            form: {},\n            actions: {\n                type: null, ok: false\n            }\n        };\n\n        const reducer = (state = initState, action = {}) => {\n\n            switch (action.type) {\n                case this.types.read_success:\n                    var {list, form, actions} = action.payload.data;\n                    var newState = {...state};\n                    if(list) {\n                        newState.list = list;\n                    }\n                    if(form) {\n                        newState.form = form;\n                    }\n                    if(actions) {\n                        newState.actions = actions;\n                    }\n                    return newState;\n\n                case this.types.edit:\n                    this.log('Inside reducer of class ' + this.name + ' : ' + JSON.stringify(action.payload));\n                    var {data} = action.payload;\n                    data.mode = this.types.edit;\n                    var newState = {...state, ...{form: data}};\n                    return newState;\n\n                case this.types.create_success :\n                    var {form, actions} = action.payload.data;\n                    console.log('inside create_success', actions)\n                    // If status ok and form has got id then add item to list and clear form\n                    // state.list && state.list.push(form) || (state.list = []);\n                    if (actions.ok === 1 && form._id) form = {};\n                    actions.timestamp = Date.now();\n\n                    return {\n                        ...state, ...{\n                            actions,\n                            form\n                        }\n                    };\n\n                case this.types.update_success || this.types.delete_success:\n                    var {list, form, actions} = action.payload.data;\n                    var newState = {...state};\n                    if(list) {\n                        newState.list = list;\n                    }\n                    if(form) {\n                        newState.form = form;\n                    }\n                    if(actions) {\n                        newState.actions = actions;\n                    }\n                    return newState;\n\n                default:\n                    this.log('Inside show default reducer of class ' + this.name + JSON.stringify(action));\n                    return state;\n            }\n        };\n\n        return reducer;\n    }\n\n\n    // SAGAS\n    get sagas() {\n        const $this = this;// new Model('show');\n\n        const create = function* (action) {\n            console.log('Action in saga', action.payload);\n            try {\n                const data = yield call($this.api.create, {\n                    formData: action.payload.data.formData,\n                    action: (d) => action.payload.data.action ? action.payload.data.action(d) : null\n                });\n                console.log('CREATE ', data);\n                if (true || data && Array.isArray(Object.keys(data))) {\n                    console.log('CREATE if', data);\n                    yield put($this.actions.create_success(data));\n                    // yield put($this.actions.read());\n                } else {\n                    console.log('CREATE fail', data);\n                    yield put($this.actions.create_fail(data));\n                }\n            } catch (err) {\n                console.log(err);\n                console.log('CREATE err', err);\n\n                yield put($this.actions.create_fail(err));\n            }\n        };\n\n        const read = function* (action) {\n            try {\n                const data = yield call($this.api.read, action.payload);\n                if (true || Array.isArray(data)) {\n                    yield put($this.actions.read_success(data));\n                } else {\n                    yield put($this.actions.read_fail(data));\n                }\n            } catch (err) {\n                yield put($this.actions.read_fail(err));\n            }\n        };\n\n        const update = function* (action) {\n            try {\n                const data = yield call($this.api.update, {\n                    formData: action.payload.data.formData,\n                    action: (d) => action.payload.data.action ? action.payload.data.action(d) : null\n                });\n                if (data && Array.isArray(Object.keys(data))) {\n                    yield put($this.actions.update_success(data));\n                    yield put($this.actions.read());\n                } else {\n                    yield put($this.actions.update_fail(data));\n                }\n            } catch (err) {\n                console.log(err);\n                yield put($this.actions.update_fail(err));\n            }\n        };\n\n        const deleted = function* (action) {\n            try {\n                // IF reset\n                if (action.payload.data === 'reset') {\n                    yield put($this.actions.delete_success(action.payload.data));\n                } else {\n                    const data = yield call($this.api.delete, action.payload);\n                    if (Array.isArray(Object.keys(data))) {\n                        yield put($this.actions.delete_success(data));\n                        yield put($this.actions.read());\n                    } else {\n                        yield put($this.actions.delete_fail(data));\n                    }\n                }\n            } catch (err) {\n                yield put($this.actions.delete_fail(err));\n            }\n        };\n\n        return {\n            create,\n            read,\n            update,\n            deleted,\n        }\n    }\n\n    // API\n    get api() {\n        return {\n            read: () =>\n                axios.get(this.server).then(res => res.data).catch(error => {\n                    throw new Error(error);\n                    console.dir(error);\n                }),\n            create: (data) => {\n                const config = {\n                    onUploadProgress: function (progressEvent) {\n                        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                        data.action && data.action(percentCompleted);\n                    }\n                };\n                console.log('API', data);\n                return axios.post(this.server, data.formData, config).then(res => res.data).catch(error => {\n                    throw new Error(error);\n                    console.dir(error);\n                })\n            },\n            delete: (data) =>\n                axios.delete(this.server + '/' + data.data).then(res => res.data).catch(error => {\n                    throw new Error(error);\n                    console.dir(error);\n                }),\n            update: (data) => {\n                const formData = data.formData;\n                const config = {\n                    onUploadProgress: function (progressEvent) {\n                        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                        data && data.action(percentCompleted);\n                    }\n                };\n                return axios.put(this.server + '/' + formData.getAll('_id'), formData, config).then(res => {\n                    console.log('Update response: ', res);\n                    return res.data;\n                }).catch(error => {\n                    throw new Error(error);\n                    console.dir(error);\n                })\n            }\n        }\n    }\n\n\n    // Validation\n\n\n}\n\nexport default Model;\n","import ActiveRecord from './ActiveRecord';\nimport axios from 'axios';\n\nclass Plot extends ActiveRecord {\n    constructor(name) {\n        super(name);\n        this.form = {\n            plots: {},\n        };\n        console.log('Plots', this.types);\n    }\n\n    newApiRead = ({data}) => {\n        console.log('Inside api newApiRead', data);\n        if(!data.channel1){\n            console.log('Inside api newApiRead undef', data.channel1);\n            return {};\n        }\n        let suffix = '?';\n        Object.keys(data).forEach(key => suffix += (`${key}=${data[key]}&`));\n        suffix += '&params=' + suffix;\n        return axios.get(this.server + suffix).then(res => res.data).catch(error => {\n            throw new Error(error);\n            console.dir(error);\n        });\n    };\n\n    get api() {\n        const newApi = super.api;\n        newApi.read = this.newApiRead;\n        return newApi;\n    }\n}\n\nexport default Plot;\n","import ActiveRecord from './ActiveRecord';\n\nclass Basic extends ActiveRecord {\n    constructor(name) {\n        super(name);\n        this.form = {\n            channels: [],\n            channel1: '',\n            channel2: '',\n            transformation: 'hlog',\n            transformations: ['hlog', 'tlog', 'glog'],\n            bins: 100,\n        };\n        console.log('Plots', this.types);\n    }\n\n    /*get types() {\n        const superTypes = super.types;\n        const name = 'episodes';\n\n        return Object.assign({}, superTypes,\n            {\n                episodes: {\n                    create: name + '.create',\n                    create_success: name + '.create.success',\n                    create_fail: name + '.create.fail',\n                }\n            });\n    }*/\n\n\n}\n\nexport default Basic;\n","import ActiveRecord from './ActiveRecord';\nimport axios from 'axios';\n\nclass Ml extends ActiveRecord {\n    constructor(name) {\n        super(name);\n        this.form = {\n            plots: {},\n        };\n        console.log('Plots', this.types);\n    }\n\n    newApiRead = ({data}) => {\n        console.log('Inside api newApiRead', data);\n        if(!data.channel1){\n            console.log('Inside api newApiRead undef', data.channel1);\n            return {};\n        }\n\n        let suffix = '?';\n        Object.keys(data).forEach(key => suffix += (`${key}=${data[key]}&`));\n        suffix += '&params=' + suffix;\n        return axios.get(this.server + suffix).then(res => res.data).catch(error => {\n            throw new Error(error);\n            console.dir(error);\n        });\n    };\n\n    get api() {\n        const newApi = super.api;\n        newApi.read = this.newApiRead;\n        return newApi;\n    }\n}\n\nexport default Ml;\n","import ActiveRecord from './ActiveRecord';\n\nclass Cl extends ActiveRecord {\n    constructor(name) {\n        super(name);\n        this.form = {\n            plots: {},\n        };\n        console.log('Plots', this.types);\n    }\n}\n\nexport default Cl;\n","// name, server, form, forceUpdate\nimport Plot from \"../Models/Plot\";\nimport Basic from \"../Models/Basic\";\nimport Ml from \"../Models/Ml\";\nimport Cl from \"../Models/Cl\";\n\n\nconst models = {\n    basics: new Basic('basics'),\n    plots: new Plot('plots'),\n    mls: new Ml('mls'),\n    cls: new Cl('cls'),\n};\n\nexport default models;\n","export const data_plotting = {\n    histogram1d: {\n        heading: 'Histogram 1 D',\n        p: `\n                This is the histogram in one dimension for the FCS file\n            `\n    },\n    histogram2d: {\n        heading: 'Histogram 2 D',\n        p: `This is the histogram in two dimensions for the FCS file. It is plotting using the provided two channels from the\n                select lists.\n            `\n    },\n    compensation: {\n        heading: 'Compensation',\n        p: `This is obtained by interchanging channels data and multiplied\n                (by 0.15 for channel 1, by 0.32 form channel 2) and subtracted from respective channels.\n            `\n    },\n    custom_transformation: {\n        heading: 'Custom Transformation',\n        p: `\n                This is custom transformation plot. The custom transformation is obtained by taking the log of each channel.\n            `\n    },\n    scatter: {\n        heading: 'Scatter plot',\n        p: `\n                This is scatter plot for the two channels selected.\n            `\n    },\n    threshold_gate: {\n        heading: 'Threshold Gate',\n        p: `\n                This is threshold gate plot. This is obtained by applying x and y gating on axes.\n            `\n    }\n}\nexport const data_ml = {\n    histogram: {\n        heading: 'Histogram',\n        p: `\n                The histogram of the two tubes which were treated with two different concentrations of Doxycycline.\n            `\n    },\n    gausian: {\n        heading: 'Gausian plot',\n        p: `\n                The Gausian Machine learning model is used to separate the data into two/more populations. It uses a default\n                estimation method for parameters.\n            `\n    },\n    gausian_table: {\n        heading: 'Gausian Table',\n        p: `\n                We applied GaussianMixtureModelOp method to add new piece of meta data to each event in the data set. The\n                events are labelled as Gauss_1 and Gauss_2 in the table.\n            `\n    },\n    gausian_posterior: {\n        heading: 'Gausian Posterior',\n        p: `\n                Sometimes the mixtures are close enough to be separated and therefore we filtered the events by applying posterior probability.\n            `\n    },\n    gausian_posterior_table: {\n        heading: 'Gausian Posterior Table',\n        p: `\n                The table shows the posterior probability of each event, marked as Gauss_1_ posterior and Gauss_2_posterior.\n            `\n    },\n    gausian_filtered_low_posterior: {\n        heading: 'Gausian filtered low posterior',\n        p: `\n                The is the plot after filtering out the low posterior probability of each event.\n            `\n    },\n    gausian_mixture_model_two_channels: {\n        heading: 'Gausian mixture model two channels',\n        p: `\n                The GaussianMixtureOp can work with multidimensions of channels. This is a plot of two channels workflow.\n            `\n    },\n    k_means: {\n        heading: 'K Means',\n        p: `\n                The plot shows the K Means in the Gaussian mixture model. The centroids are marked with a star symbol.\n            `\n    },\n    k_means2: {\n        heading: 'K Means 3 clusters',\n        p: `\n                The plot shows the K Means in the Gaussian mixture model. The centroids are marked with a star symbol.\n                The shows a more clear clustering by taking the log of the channels instead.\n            `\n    },\n}\n","import React from 'react';\nimport {data_plotting, data_ml} from \"../settings/mocks\";\n\nconst Plot = (props) => {\n    const {image, data_section} = props;\n    const data = data_section === 'data_ml' ? data_ml : data_plotting;\n    const {heading, p} = data[image.id] ? data[image.id] : {heading: 'Heading', p: 'Para'};\n    const title = image.id[0].toUpperCase() + image.id.slice(1).split('_').join(\" \");\n    return (\n        <div className={data_section === 'data_ml' ? \"col-sm-12 py-2\" : \"col-sm-6 py-2\"}>\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    {title}\n                </div>\n                <div className=\"card-body\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-8\">\n                            <img className=\"img-fluid\" src={image.src} alt={image.id}/>\n                        </div>\n                        <div className=\"col-sm-4\">\n                            <h5 className=\"card-title\">{heading}</h5>\n                            <p className=\"card-text\">{p}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Plot;\n","import React from 'react';\nimport {apiServer} from \"../settings/constants\";\n\nconst Loading = () => {\n    const imageUrl = apiServer + '/static/img/loading.gif';\n    return (\n        <img src={imageUrl} width=\"150\" alt=\"Loading...\"/>\n    )\n};\n\nexport default Loading;\n","import React, {useEffect, useContext, useState} from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nimport models from '../store/models';\nimport Plot from './Plot';\nimport {apiServer} from \"../settings/constants\";\nimport Loading from \"./Loading\";\n\n\nclass Plots extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            channel1: 0,\n            channel2: 0,\n            transformation: 'hlog',\n            bins: 0,\n            plot: models.plots, // Basic is an Object of class Basic, while basic is array of objects from json/db\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log('componentWillReceiveProps');\n        const {readAction} = this.props;\n        const {channel1, channel2, transformation, bins, plot} = this.state;\n        console.log(channel1, channel2, transformation, bins);\n        if (\n            channel1 === nextProps.basics.form.channel1 &&\n            channel2 === nextProps.basics.form.channel2 &&\n            transformation === nextProps.basics.form.transformation &&\n            bins === nextProps.basics.form.bins\n        ) {\n            console.log('Same');\n            plot.list = nextProps.plots.list;\n            this.setState({plot, loading: false});\n        } else {\n            console.log('Diff');\n            const data = {\n                channel1: nextProps.basics.form.channel1,\n                channel2: nextProps.basics.form.channel2,\n                transformation: nextProps.basics.form.transformation,\n                bins: nextProps.basics.form.bins,\n            };\n            readAction(data);\n            this.setState({...data, loading: true});\n        }\n    }\n\n\n    render() {\n        const {plot, loading} = this.state;\n        const image_url = apiServer + '/static/plots/plotting/';\n        if (Object.keys(plot.list).length < 1 || loading) return <Loading/>;\n        console.log('Plots', plot.list);\n\n        return (\n            <div className=\"row py-3\">\n                <div className=\"col-sm-12\">\n                    <h1>Plots</h1>\n                </div>\n                {\n                    Object.keys(plot.list).map(key => <Plot key={key}\n                                                            image={{id: key, src: image_url + plot.list[key]}}\n                                                            data_section=\"data_plots\"/>)\n                }\n            </div>\n        )\n    }\n}\n\n/**\n * Get data from store\n * @param state\n */\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    basics: state.basics,\n});\n\n\n/**\n * Import action from dir action above - but must be passed to connect method in order to trigger reducer in store\n * @type {{UserUpdate: UserUpdateAction}}\n */\nconst mapActionsToProps = {\n    readAction: models.plots.actions.read,\n    deleteAction: models.plots.actions.delete,\n    createAction: models.plots.actions.create,\n    createSuccessAction: models.plots.actions.create_success,\n    updateAction: models.plots.actions.update,\n};\n\nexport default withRouter(connect(mapStateToProps, mapActionsToProps)(Plots));\n","import React, {useEffect, useContext, useState} from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nimport models from '../store/models';\nimport Plot from './Plot';\nimport {apiServer} from \"../settings/constants\";\nimport Loading from \"./Loading\";\n\n\nclass Mls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            channel1: 0,\n            channel2: 0,\n            transformation: 'hlog',\n            bins: 0,\n            ml: models.mls, // Basic is an Object of class Basic, while basic is array of objects from json/db\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log('componentWillReceiveProps');\n        const {readAction} = this.props;\n        const {channel1, channel2, transformation, bins, ml} = this.state;\n        console.log(channel1, channel2, transformation, bins);\n        if (\n            channel1 === nextProps.basics.form.channel1 &&\n            channel2 === nextProps.basics.form.channel2 &&\n            transformation === nextProps.basics.form.transformation &&\n            bins === nextProps.basics.form.bins\n        ) {\n            console.log('Same');\n            ml.list = nextProps.mls.list;\n            this.setState({ml, loading: false});\n        } else {\n            console.log('Diff');\n            const data = {\n                channel1: nextProps.basics.form.channel1,\n                channel2: nextProps.basics.form.channel2,\n                transformation: nextProps.basics.form.transformation,\n                bins: nextProps.basics.form.bins,\n            };\n            readAction(data);\n            this.setState({...data, loading: true});\n        }\n    }\n\n\n    render() {\n        const {ml, loading} = this.state;\n        const image_url = apiServer + '/static/plots/machinelearning/';\n        if (Object.keys(ml.list).length < 1 || loading) return <Loading/>;\n        console.log('Plots', ml.list);\n\n        return (\n            <div className=\"row py-3\">\n                <div className=\"col-sm-12\">\n                    <h1>ML</h1>\n                </div>\n                {\n                    Object.keys(ml.list).map(key => <Plot key={key}\n                                                            image={{id: key, src: image_url + ml.list[key]}}\n                                                            data_section=\"data_ml\"/>)\n                }\n            </div>\n        )\n    }\n}\n\n/**\n * Get data from store\n * @param state\n */\nconst mapStateToProps = state => ({\n    mls: state.mls,\n    basics: state.basics,\n});\n\n\n/**\n * Import action from dir action above - but must be passed to connect method in order to trigger reducer in store\n * @type {{UserUpdate: UserUpdateAction}}\n */\nconst mapActionsToProps = {\n    readAction: models.mls.actions.read,\n    deleteAction: models.mls.actions.delete,\n    createAction: models.mls.actions.create,\n    createSuccessAction: models.mls.actions.create_success,\n    updateAction: models.mls.actions.update,\n};\n\nexport default withRouter(connect(mapStateToProps, mapActionsToProps)(Mls));\n","import React, {useEffect, useContext, useState} from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nimport models from '../store/models';\nimport Plot from './Plot';\nimport {apiServer} from \"../settings/constants\";\nimport Loading from \"./Loading\";\n\n\nclass Cls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            channel1: 0,\n            channel2: 0,\n            transformation: 'hlog',\n            bins: 0,\n            cl: models.cls, // Basic is an Object of class Basic, while basic is array of objects from json/db\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        const {readAction, cls} = nextProps;\n        console.log('Cls componentWillReceiveProps', cls);\n        const {cl} = this.state;\n        cl.list = cls.list;\n        this.setState({cl, loading: false});\n    }\n\n\n    render() {\n        const {cl, loading} = this.state;\n        const image_url = apiServer + '/static/plots/classification/';\n        if (Object.keys(cl.list).length < 1 || loading) return <Loading/>;\n        console.log('Classification', cl.list);\n\n        return (\n            <div className=\"row py-3\">\n                <div className=\"col-sm-12\">\n                    <h1>Classification</h1>\n                </div>\n                <div className=\"col-sm-12\">\n                {\n                    Object.keys(cl.list).map(key =>\n                        <div className=\"jumbotron\" key={key}>\n                            <h2 className=\"display-6\">{key}</h2>\n                            <h3 className=\"display-8 mt-4\">Test Score</h3>\n                            {\n                                Object.keys(cl.list[key].test_score).map(k =>\n                                    <strong>{k} : {JSON.stringify(cl.list[key].test_score[k])}<br/></strong>\n                                )\n                            }\n\n\n                            <h3 className=\"display-8 mt-4\">Number of Malignant and Benign cells</h3>\n                            <table className=\"table\">\n                                <thead>\n                                <tr>\n                                    {\n                                        Object.keys(cl.list[key].predictions.counts).map(model =>\n                                            <th>{model}</th>\n                                        )\n                                    }\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <tr>\n                                    {\n                                        Object.keys(cl.list[key].predictions.counts).map(m =>\n                                            <td>\n                                                <strong>Benign : </strong>\n                                                {JSON.stringify(cl.list[key].predictions.counts[m]['0'])}\n                                                <br/>\n                                                <strong>Malignant : </strong>\n                                                {JSON.stringify(cl.list[key].predictions.counts[m]['1'])}\n                                            </td>\n                                        )\n                                    }\n                                </tr>\n                                </tbody>\n                            </table>\n                            <hr className=\"my-4\"/>\n                        </div>)\n                }\n                </div>\n            </div>\n        )\n    }\n}\n\n/**\n * Get data from store\n * @param state\n */\nconst mapStateToProps = state => ({\n    cls: state.cls,\n    basics: state.basics,\n});\n\n\n/**\n * Import action from dir action above - but must be passed to connect method in order to trigger reducer in store\n * @type {{UserUpdate: UserUpdateAction}}\n */\nconst mapActionsToProps = {\n    readAction: models.cls.actions.read,\n    deleteAction: models.cls.actions.delete,\n    createAction: models.cls.actions.create,\n    createSuccessAction: models.cls.actions.create_success,\n    updateAction: models.cls.actions.update,\n};\n\nexport default withRouter(connect(mapStateToProps, mapActionsToProps)(Cls));\n","import axios from 'axios';\nimport {apiServer} from '../settings/constants';\nconst endPoint = '/api/basic';\nconst server = apiServer + endPoint;\n\nconst api = {\n    read: () =>\n        axios.get(server)\n            .then(res => res.data)\n            .catch(error =>\n                console.error(error)\n            )\n};\nexport default api;\n","import React from 'react';\nimport Basic from './models/Basic';\nimport basicReducer from '../reducers/basicReducer';\n\nexport const BasicContext = React.createContext();\n\nconst BasicContextProvider = (props) => {\n    const [basic, dispatch] = React.useReducer(basicReducer, new Basic());\n    return (\n        <BasicContext.Provider value={{basic, dispatch}}>\n            {props.children}\n        </BasicContext.Provider>\n    )\n};\n\nexport default BasicContextProvider;\n","import React, {useContext} from 'react';\nimport axios from 'axios';\nimport {BasicContext} from \"../contexts/BasicContextProvider\";\nimport api from \"../api/basic\";\nimport {apiServer} from \"../settings/constants\";\n\nconst Upload = () => {\n    const fileRef = React.createRef();\n    // const {basic, dispatch} = useContext(BasicContext);\n\n    const uploadFile = () => {\n        const formData = new FormData();\n        const files = fileRef.current.files;\n        formData.append(\"fcs_file\", files[0]);\n        axios.post(apiServer + '/api/upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(data => {\n            console.log('File uploaded');\n            api.read().then(basic => {\n                if (basic) {\n                    // dispatch({\n                    //     type: 'ADD_BASIC',\n                    //     payload: {channels: basic}\n                    // });\n                    window.location.reload(false);\n                }\n            });\n        }).catch(err => console.log('Error occurred ', err))\n    };\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12 order-md-0\">\n                <h2 className=\"mb-3\">Upload FCS File</h2>\n                <form method=\"post\" encType=\"multipart/form-data\" action=\"/api/upload\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-3\">\n\n                            <div className=\"input-group\">\n                                <div className=\"custom-file\">\n                                    <input ref={fileRef} type=\"file\" className=\"custom-file-input\" id=\"fcs_file\"\n                                           name=\"fcs_file\"\n                                           multiple\n                                           aria-describedby=\"fcs_file\"/>\n                                    <label className=\"custom-file-label\" htmlFor=\"fcs_file\">Choose file</label>\n                                </div>\n                                <div className=\"input-group-append\">\n                                    <input className=\"btn btn-outline-secondary\" type=\"button\" id=\"upload\"\n                                           value=\"Upload\" onClick={(e) => {\n                                        e.preventDefault();\n                                        uploadFile();\n                                    }}/>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <hr className=\"mb-4\"/>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Upload;\n","import React, {useContext, useEffect, useState} from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nimport models from '../store/models';\n\n\nconst Options = (props) => {\n    let {channels} = props;\n    channels = channels && channels.channels ? channels.channels : channels;\n    console.log('Basic_ componentOptions: ', props)\n    if (!channels || !Array.isArray(channels)) return <option value=\"1\">Loading...</option>\n    return (\n        channels.map(ch => <option key={ch} value={ch}>{ch}</option>)\n    )\n};\n\n\nclass Basic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            basic: models.basics, // Basic is an Object of class Basic, while basic is array of objects from json/db\n            attributes: {\n                channels: [],\n                channel1: '',\n                channel2: '',\n                transformation: 'hlog',\n                bins: 100,\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        const {basic, attributes} = this.state;\n        basic.list = nextProps.basics.list;\n        if (!attributes.channel1 || !attributes.channel2) {\n            attributes.channel1 = basic.list[0];\n            attributes.channel2 = basic.list[1];\n        }\n        this.setState({basic});\n    }\n\n    onChange = (e) => {\n        const {attributes} = this.state;\n        attributes[e.target.id] = e.target.value;\n        this.setState({attributes});\n    };\n\n    onClick = (e) => {\n        e.preventDefault();\n        const {attributes} = this.state;\n        const {createSuccessAction} = this.props;\n        const data = {\n            actions: {status: 'success', ok: 1},\n            form: attributes\n        };\n        createSuccessAction(data)\n        console.log('Firing actions');\n    };\n\n    render() {\n        const {basic, attributes} = this.state;\n\n        return (\n            <>\n                <div className=\"row\" id=\"basic-div\">\n                    <div className=\"col-md-12 order-md-0\">\n                        <h1>Basic info</h1>\n                        <p className=\"lead\" id=\"basic-info\"></p>\n\n                        <select className=\"form-control\" id=\"channel-name-1\" value={attributes.channel1}\n                                id=\"channel1\"\n                                onChange={(e) => this.onChange(e)}>\n                            <Options channels={basic.list}/>\n                        </select>\n                        <br/>\n                        <select className=\"form-control\" id=\"channel-name-2\" value={attributes.channel2}\n                                id=\"channel2\"\n                                onChange={(e) => this.onChange(e)}>\n                            <Options channels={basic.list.slice(1)}/>\n                        </select>\n                        <br/>\n\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <select className=\"form-control\" id=\"transformations\" value={attributes.transformation}\n                                        id=\"transformation\"\n                                        onChange={(e) => this.onChange(e)}>\n                                    <Options channels={basic.form.transformations}/>\n                                </select>\n                            </div>\n                            <div className=\"col-md-6\">\n                                <input type=\"number\" defaultValue={attributes.bins} className=\"form-control\" id=\"bins\"\n                                       onChange={e => this.onChange(e)}/>\n                            </div>\n                        </div>\n\n                        <br/>\n                        <button onClick={e => this.onClick(e)} className=\"btn btn-lg btn-success\">\n                            <i className=\"fas fa-chart-line\"></i> Display\n                        </button>\n\n                        <hr className=\"mb-4\"/>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\n/**\n * Get data from store\n * @param state\n */\nconst mapStateToProps = state => ({\n    basics: state.basics,\n});\n\n\n/**\n * Import action from dir action above - but must be passed to connect method in order to trigger reducer in store\n * @type {{UserUpdate: UserUpdateAction}}\n */\nconst mapActionsToProps = {\n    readAction: models.basics.actions.read,\n    deleteAction: models.basics.actions.delete,\n    createAction: models.basics.actions.create,\n    createSuccessAction: models.basics.actions.create_success,\n    updateAction: models.basics.actions.update,\n};\n\nexport default withRouter(connect(mapStateToProps, mapActionsToProps)(Basic));\n","import React, {Component} from 'react';\nimport {Route, Switch, BrowserRouter} from 'react-router-dom';\n\nimport Navbar from './components/Navbar'\nimport Container from './components/Container'\nimport Plots from './components/Plots';\nimport Mls from './components/Mls';\nimport Cls from './components/Cls';\nimport Upload from './components/Upload'\nimport Basic from './components/Basic'\n\n\nclass App extends Component {\n\n    render() {\n        return (\n            <>\n                <Navbar/>\n                <Container>\n                    <Upload/>\n                    <Basic/>\n                    <Plots/>\n                    <Mls/>\n                    <Cls/>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import {takeLatest, takeEvery} from 'redux-saga/effects';\nimport models from \"../store/models\";\n\nexport default function* rootSaga() {\n    for(let i=0; i < Object.keys(models).length; i++) {\n        const model = models[Object.keys(models)[i]];\n        // CRUD Listeners\n        yield takeLatest(model.types.create, model.sagas.create);\n        yield takeLatest(model.types.read, model.sagas.read);\n        yield takeLatest(model.types.update, model.sagas.update);\n        yield takeLatest(model.types.delete, model.sagas.deleted);\n    }\n}\n\n\n\n","/**\n * Standard packages\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, compose, combineReducers, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * Our custom components / packages\n */\nimport { ENVIRONMENT } from \"./common/behaviour\";\nimport App from './App';\n\n// # 01\n/**\n * A reducer is a function that operates on the state object and then returns it\n * Please note that this function is also called during initialization of store - so any code\n * without if stmt will be executed multiple times - internal operation of store !\n * @param state - this is a misleading name - here it is not the full state but just corresponding key value\n * @param action\n * @returns {Array} - every return value is assigned to the corresponding key in allReducers\n */\nimport rootSaga from './sagas/rootSaga';\nimport models from './store/models';\n\nlet reds = {};\nfor(let i=0; i < Object.keys(models).length; i++) {\n    const model = models[Object.keys(models)[i]];\n    reds[model.name] = model.reducers\n}\n\nconst allReducers = combineReducers( Object.assign({}, {\n}, reds));\n\n// # 02\n/**\n * Sagas to connect to external world - async api calls\n */\nconst sagaMiddleware = createSagaMiddleware();\n\n// # 03\n/**\n * Store enhancers, devToolsExtensions\n */\n// Fixing error : TypeError: t is undefined\n// Only chrome can handle the redux dev tool\n// Redux compose cannot handle a null or undefined middleware\nconst allStoreEnhancers = window.navigator.userAgent.includes('Chrome') && window.devToolsExtension && ENVIRONMENT.DEV\n    ? compose(\n        applyMiddleware(sagaMiddleware),\n        window.devToolsExtension && window.devToolsExtension()\n    )\n    : applyMiddleware(sagaMiddleware);\n\n// # 04\n/**\n * Create store with allReducers which are all called one by one when there is dispatch\n * Second param is initial state of store\n * Last param is for redux debug in chrome extension\n * @type {Store<S&StateExt>&Ext}\n */\nconst store = createStore(\n    allReducers,\n    {},\n    allStoreEnhancers\n);\nsagaMiddleware.run(rootSaga);\n\n// # 05\n/**\n * You can see the status of store - but only data and not reducers\n */\nconsole.log(store.getState());\n\n// # 06\n/**\n * Action is an object with format of type and payload\n * @type {{type: string, payload: {newState: string}}}\n * Dispatch action to store\n */\n\n/*\n* no need here moved to App component for unified standard place for all these actions\nstore.dispatch(eventStatsUpdateAction());\nlet statsUpdate = localStorage.getItem('statsUpdate');\nclearInterval(statsUpdate);\nstatsUpdate = setInterval(() => store.dispatch(eventStatsUpdateAction()), 6000);\nlocalStorage.setItem('statsUpdate', statsUpdate);\n*/\n\n// Read news\nif(true || ENVIRONMENT.DEV) {\n    // store.dispatch(postsReadAction());\n    // store.dispatch(userReadAction());\n    // store.dispatch(videoReadAction());\n    // store.dispatch(show.actions.read({}));\n    // store.dispatch(user.actions.read({}));\n    /*store.dispatch(show.actions.read_success({\n        a: 5455,\n        b: 9909\n    }));*/\n\n    // Dispatch all read actions\n    for(let i=0; i < Object.keys(models).length; i++) {\n        const model = models[Object.keys(models)[i]];\n        store.dispatch(model.actions.read({}));\n    }\n}\n\n/**\n * Avoid setting up multiple interval objects in background\n * @type {string | null}\n */\nif(ENVIRONMENT.DEV) {\n    store.subscribe(() => {\n        console.log('subscribed store in index', store.getState());\n    });\n}\n\n/**\n * Render the main App Component\n */\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render((\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}